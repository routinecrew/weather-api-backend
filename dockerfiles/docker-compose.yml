version: '3.8'

services:
  weather-postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres
    container_name: weather-postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DB: ${POSTGRES_DATABASE:-weather_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      timeout: 20s
      interval: 5s
      start_period: 5s
      retries: 5
    networks:
      - weather-network
    restart: unless-stopped

  weather-service:
    image: weather-api-backend-weather-service
    volumes:
      - ./IPB_250104_250305.csv:/app/dist/IPB_250104_250305.csv
    # 서비스 시작 시 자동으로 데이터 가져오기 실행
    command: sh -c "node dist/server.js && node dist/scripts/importWeatherCsv.js"
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather-service
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-9092}
      POSTGRES_HOST: weather-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE:-weather_db}
      TZ: ${TZ:-Asia/Seoul}
      APP_NAME: ${APP_NAME:-weather-service}
    depends_on:
      - weather-postgres
    ports:
      - "${PORT:-9092}:${PORT:-9092}"  # 환경 변수에서 포트 동적 사용
    networks:
      - weather-network
    restart: on-failure  # 실패 시에만 재시작 (무한 재시작 방지)
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
  weather-network:
    driver: bridge

volumes:
  postgres_data: